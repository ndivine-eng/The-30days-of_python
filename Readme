# 30 Days of Python - Flask Project

## Overview

This project is part of my journey in learning **Python** over the course of 30 days. During this period, I developed a **Flask web application** that connects to **MongoDB** for storing and fetching user data. I learned how to create forms, handle POST requests, and retrieve information from a database using Flask.

## Project Structure

- **app.py**: The main Python file that contains the Flask routes and logic for handling form submissions and database queries.
- **templates/**: Contains the HTML templates for rendering forms and displaying user data.
    - **form.html**: HTML form to submit user data (name, age, email, location).
    - **users.html**: Template to display all the users fetched from the MongoDB database.
- **MongoDB**: Used as the database to store user information.

## Project Features

1. **Flask Setup**: The application is built using Flask and follows the MVC (Model-View-Controller) architecture.
2. **MongoDB Connection**: Connects to a local MongoDB instance (`mongodb://localhost:27017/`) to store and fetch user data.
3. **Form Submission**: A form in `form.html` allows users to input their data (name, age, email, and location). On submission, the data is stored in MongoDB.
4. **Fetching Data**: The `/users` route fetches the stored users from the database and displays them in a table on the `users.html` page.
5. **Responsive**: The app works well both in development and production environments.

## Key Technologies

- **Python**: The primary programming language used for building the app.
- **Flask**: A lightweight web framework for building web applications in Python.
- **MongoDB**: A NoSQL database for storing user data.
- **HTML**: Used to create the forms and display data on the frontend.

## Steps to Run the Project

1. **Install Dependencies**:
    First, install Flask and PyMongo by running:

    ```bash
    pip install flask pymongo
    ```

2. **Set Up MongoDB**:
    Ensure you have MongoDB installed and running locally. You can download it from [here](https://www.mongodb.com/try/download/community) if you don’t have it set up already.

    Start the MongoDB server:

    ```bash
    mongod
    ```

3. **Run the Flask Application**:
    Run the Flask app using the following command:

    ```bash
    python app.py
    ```

4. **Access the App**:
    Open your web browser and go to:

    ```
    http://127.0.0.1:5000/
    ```

    You should see a message saying "Flask is working and connected to MongoDB!".
    
    - To submit data, go to `/form`.
    - To view the submitted data, go to `/users`.

## Future Enhancements

- **User Authentication**: Adding login and registration functionality to secure the application.
- **Data Validation**: Adding form validation before submission to ensure that users provide correct and complete data.
- **Pagination**: Implementing pagination for the `/users` page to display users in chunks.
- **API Endpoints**: Adding more API endpoints to interact with the application programmatically.

## My 30-Day Learning Journey

Throughout the 30 days, I learned key Python concepts, including:

1. **Data Structures**: Lists, dictionaries, tuples, and sets.
2. **Web Development with Flask**: Routing, handling requests, templates, and form handling.
3. **MongoDB**: How to connect, store, and retrieve data using MongoDB.
4. **Building a Web Application**: Developing a fully functional Flask app connected to a database, handling form submissions, and displaying data dynamically.

This project has been a great way to apply my learning in a practical way. I’m looking forward to expanding this app and learning more advanced concepts.
